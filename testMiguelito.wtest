import miguelito.*

describe "Tests platos" {

  test "Parrillada es especial" {
    const parri1 = new Parrillada(elementos = [provo,burga, burga2, corte])
    assert.that(parri1.esEspecial())
  }

  test "Parrillada no es especial"{
    const parri1 = new Parrillada(elementos = [new Provoleta(peso = 0, tieneEmpanado = false), new Hamburguesa(pesoMedallonCarne = 0, pan = industrial), new CorteCarne(estaAPunto = false, peso = 0)])
    assert.notThat(parri1.esEspecial())
  }

  test "Parrillada es apta para celiacos"{
    const parri1 = new Parrillada(elementos = [new Provoleta(peso = 0, tieneEmpanado = false), new Hamburguesa(pesoMedallonCarne = 0, pan = maiz), new CorteCarne(estaAPunto = false, peso = 0)])
    assert.that(parri1.aptoCeliaco())
  }

  test "Parrillada no es apta para celiacos"{
    const parri1 = new Parrillada(elementos = [new Provoleta(peso = 0, tieneEmpanado = true), new Hamburguesa(pesoMedallonCarne = 0, pan = industrial), new CorteCarne(estaAPunto = false, peso = 0)])
    assert.notThat(parri1.aptoCeliaco())
  }
}

describe "Test comensales"{
  test "Comensal se da un gusto"{
    const roberto = new Comensal(tipo = cuatroXcuatro, dinero = 19999)
    roberto.darGusto()
    assert.equals(19899, roberto.dinero())
  }

  test "Comensal no puede darse un gusto"{
    const roberto = new Comensal(tipo = celiaco, dinero = 19999)
    assert.throwsExceptionWithMessage("No hay platos para darse un gusto", { roberto.darGusto() })
  }

  test "Comensal cambia de habito y puede darse un gusto"{
    const roberto = new Comensal(tipo = celiaco, dinero = 19999)
    roberto.seCambiaALaUADE()
    roberto.darGusto()
    assert.equals(19899, roberto.dinero())
  }
}